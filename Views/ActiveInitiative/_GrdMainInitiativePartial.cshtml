@{
    var profileData = this.Session["DefaultGAINSess"] as GAIN.Models.LoginSession;
    var tahun = profileData.ProjectYear;
    //var startdate = 
}

@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        settings.Height = System.Web.UI.WebControls.Unit.Percentage(100);
        settings.Name = "GrdMainInitiative";
        settings.CallbackRouteValues = new { Controller = "ActiveInitiative", Action = "GrdMainInitiativePartial" };

        settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.Control;
        settings.SettingsResizing.Visualization = ResizingMode.Live;

        settings.KeyFieldName = "id";
        settings.Styles.Row.Cursor = "pointer";

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "ActiveInitiative", Action = "GrdMainInitiativePartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "ActiveInitiative", Action = "GrdMainInitiativePartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "ActiveInitiative", Action = "GrdMainInitiativePartialDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.Inline; // GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.FixedStyle = GridViewColumnFixedStyle.Left;
        settings.CommandColumn.Width = 120;
        //settings.CommandColumn.ShowNewButton = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.Caption = " ";
        settings.CommandColumn.Width = 150;

        //GridViewCommandColumnCustomButton EditInitiative = new GridViewCommandColumnCustomButton() { ID = "EditInitiative", Text = "" };
        //EditInitiative.Image.Url = Url.Content("~/assets/poin/images/Sign_up_Icon_22.png");
        //EditInitiative.Image.ToolTip = "Edit Initiative";
        //settings.CommandColumn.CustomButtons.Add(EditInitiative);

        //settings.SettingsCommandButton.EditButton.RenderMode = GridCommandButtonRenderMode.Image;
        //settings.SettingsCommandButton.EditButton.Image.IconID = "icoEdit";
        //settings.SettingsCommandButton.EditButton.Image.Url = Url.Content("~/assets/poin/images/Sign_up_Icon_22.png");
        //settings.SettingsCommandButton.EditButton.Image.ToolTip = "Edit";

        settings.SettingsCommandButton.DeleteButton.RenderMode = GridCommandButtonRenderMode.Image;
        settings.SettingsCommandButton.DeleteButton.Image.IconID = "Open_Folder_Delete_Icon_16";
        settings.SettingsCommandButton.DeleteButton.Image.Url = Url.Content("~/assets/poin/images/Open_Folder_Delete_Icon_22.png");
        settings.SettingsCommandButton.DeleteButton.Image.ToolTip = "To Be Deleted";
        settings.SettingsCommandButton.UpdateButton.RenderMode = GridCommandButtonRenderMode.Image;
        settings.SettingsCommandButton.UpdateButton.Image.IconID = "Total Commander_32";
        settings.SettingsCommandButton.UpdateButton.Image.Url = Url.Content("~/assets/poin/images/Total Commander_22.png");
        settings.SettingsCommandButton.UpdateButton.Image.ToolTip = "Save";
        settings.SettingsCommandButton.CancelButton.RenderMode = GridCommandButtonRenderMode.Image;
        settings.SettingsCommandButton.CancelButton.Image.IconID = "Ad Aware_32";
        settings.SettingsCommandButton.CancelButton.Image.Url = Url.Content("~/assets/poin/images/Ad Aware_22.png");
        settings.SettingsCommandButton.CancelButton.Image.ToolTip = "Cancel";

        #region Grid View Custom Command Button
        GridViewCommandColumnCustomButton EventReview = new GridViewCommandColumnCustomButton() { ID = "EventReview", Text = "" };
        EventReview.Image.Url = Url.Content("~/assets/poin/images/log_22.png");
        EventReview.Image.ToolTip = "Event Review";
        settings.CommandColumn.CustomButtons.Add(EventReview);

        GridViewCommandColumnCustomButton Comment = new GridViewCommandColumnCustomButton() { ID = "Comment", Text = "" };
        Comment.Image.Url = Url.Content("~/assets/poin/images/conversation.png");
        Comment.Image.ToolTip = "Comment";
        settings.CommandColumn.CustomButtons.Add(Comment);
        settings.CommandColumn.ButtonRenderMode = GridCommandButtonRenderMode.Image;

        GridViewCommandColumnCustomButton Upload = new GridViewCommandColumnCustomButton() { ID = "Upload", Text = "" };
        Upload.Image.Url = Url.Content("~/assets/poin/images/cloud-computing.png");
        Upload.Image.ToolTip = "Uploaded File";
        settings.CommandColumn.CustomButtons.Add(Upload);
        settings.CommandColumn.ButtonRenderMode = GridCommandButtonRenderMode.Image;

        settings.ClientSideEvents.CustomButtonClick = string.Format("function(s, e) {{ if(e.buttonID == 'Comment') OnClickComment(s, e); else if (e.buttonID == 'Upload') OnClickUpload(s,e); else if (e.buttonID == 'EditInitiative') OnClickEditInitiative(s,e); else OnClickEventReview(s, e); }}");
        #endregion

        settings.SettingsExport.EnableClientSideExportAPI = true;

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsPager.PageSize = 10;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;

        settings.EnableRowsCache = false;
        settings.SettingsCookies.Enabled = false;
        settings.SettingsCookies.StoreFiltering = true;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowFilterRowMenu = false;
        settings.Settings.ShowHeaderFilterButton = true;
        settings.CommandColumn.ShowClearFilterButton = true;
        settings.Settings.ShowFilterBar = DevExpress.Web.GridViewStatusBarMode.Visible;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;

        settings.SettingsExport.Landscape = true;
        settings.SettingsExport.PaperKind = System.Drawing.Printing.PaperKind.A3;
        settings.SettingsExport.TopMargin = 0;
        settings.SettingsExport.LeftMargin = 0;
        settings.SettingsExport.RightMargin = 0;
        settings.SettingsExport.Styles.Cell.Font.Size = 8;

        #region column
        settings.Columns.Add(c =>
        {
            c.FieldName = "InitNumber";
            c.Width = 100;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.FixedStyle = GridViewColumnFixedStyle.Left;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "RelatedInitiative";
            c.Width = 100;
            c.FixedStyle = GridViewColumnFixedStyle.Left;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "SourceCategory";
            c.Name = "SourceCategory";
            c.Caption = "Source Category";
            c.Width = 100;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.FixedStyle = GridViewColumnFixedStyle.Left;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "CategoryName";
                p.ValueField = "id";
                p.ValueType = typeof(string);
                p.ClientInstanceName = "SourceCategoryID";
                //p.ClientSideEvents.SelectedIndexChanged = "OnSubCountryChanged";
                p.BindList(ViewData["SourceCategoryName"]);
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "SubCountryID";
            c.Name = "SubCountryID";
            c.Caption = "Sub Country";
            c.Width = 150;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.FixedStyle = GridViewColumnFixedStyle.Left;
            c.CellStyle.BackColor = System.Drawing.Color.Ivory;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "SubCountryName";
                p.ValueField = "id";
                p.ValueType = typeof(string);
                p.ClientInstanceName = "SubCountryID";
                p.ClientSideEvents.SelectedIndexChanged = "OnSubCountryChanged";
                p.BindList(ViewData["SubCountryName"]);
            });
            c.SetFooterTemplateContent(p =>
            {
                Html.ViewContext.Writer.Write("<strong>Grand Total:<strong>");
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "BrandID";
            c.Name = "BrandID";
            c.Caption = "Brand";
            c.Width = 150;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.CellStyle.BackColor = System.Drawing.Color.Ivory;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "brandname";
                p.ValueField = "id";
                p.ClientInstanceName = "BrandID";
                p.ValueType = typeof(string);
                p.ClientSideEvents.SelectedIndexChanged = "OnBrandChanged";
                p.BindList(ViewData["brandname"]);
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "CountryID";
            c.Name = "CountryID";
            c.Caption = "Country";
            c.Width = 150;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.CellStyle.BackColor = System.Drawing.Color.AliceBlue;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "CountryName";
                p.ValueField = "id";
                p.ClientInstanceName = "CountryID";
                p.ValueType = typeof(string);
                p.BindList(ViewData["CountryName"]);
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "RegionID";
            c.Name = "RegionID";
            c.Caption = "Region";
            c.Width = 100;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.CellStyle.BackColor = System.Drawing.Color.AliceBlue;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "RegionName";
                p.ValueField = "id";
                p.ClientInstanceName = "RegionID";
                p.ValueType = typeof(string);
                p.BindList(ViewData["mregions"]);
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "SubRegionID";
            c.Caption = "Sub Region";
            c.Width = 100;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.CellStyle.BackColor = System.Drawing.Color.AliceBlue;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "SubRegionName";
                p.ValueField = "id";
                p.ClientInstanceName = "SubRegionID";
                p.ValueType = typeof(string);
                p.BindList(ViewData["msubregion"]);
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "ClusterName";
            c.Caption = "Cluster";
            c.Width = 200;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.CellStyle.BackColor = System.Drawing.Color.AliceBlue;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "ClusterName";
                p.ValueField = "ClusterName";
                p.ClientInstanceName = "ClusterID";
                p.ValueType = typeof(string);
                p.BindList(ViewData["mcluster"]);
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "RegionalOffice_Name";
            c.Name = "RegionalOfficeID";
            c.Caption = "Regional Office";
            c.Width = 200;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.CellStyle.BackColor = System.Drawing.Color.AliceBlue;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "RegionalOffice_Name";
                p.ValueField = "RegionalOffice_Name";
                p.ClientInstanceName = "RegionalOfficeID";
                p.ValueType = typeof(string);
                p.BindList(ViewData["mregional_office"]);
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "CostControlID";
            c.Name = "CostControlID";
            c.Caption = "Cost Control Site";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
            c.Width = 120;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.CellStyle.BackColor = System.Drawing.Color.AliceBlue;

            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "CostControlSiteName";
                p.ValueField = "id";
                p.ClientInstanceName = "CostControlID";
                p.ValueType = typeof(string);
                p.BindList(ViewData["CostControlSiteName"]);
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "LegalEntityName";
            c.Name = "LegalEntityID";
            c.Caption = "Legal Entity Name";
            c.Width = 250;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.CellStyle.BackColor = System.Drawing.Color.Ivory;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "LegalEntityName";
                p.ValueField = "LegalEntityName";
                p.ClientInstanceName = "LegalEntityID";
                p.ValueType = typeof(string);
                p.BindList(ViewData["LegalEntityName"]);
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Confidential";
            c.Caption = "Confidential";
            c.Width = 100;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.EditorProperties().ComboBox(p =>
            {
                p.ValueType = typeof(string);
                p.Items.Add("Y");
                p.Items.Add("N");
            });
        });
        settings.Columns.Add("Description").Width = 1000;
        settings.Columns.Add("ResponsibleFullName").Width = 150;
        settings.Columns.Add(c =>
        {
            c.FieldName = "InitiativeType";
            c.Name = "InitiativeType";
            c.Caption = "TypeOf Initiative";
            c.Width = 200;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "SavingTypeName";
                p.ValueField = "id";
                p.ClientInstanceName = "InitiativeType";
                p.ClientSideEvents.SelectedIndexChanged = "OnInitiativeTypeChanged";
                p.ValueType = typeof(string);
                p.BindList(ViewData["SavingTypeName"]);
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "CostCategoryID";
            c.Name = "CostCategoryID";
            c.Caption = "Item Category";
            c.Width = 250;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "CostTypeName";
                p.ValueField = "id";
                p.ClientInstanceName = "CostCategoryID";
                p.ClientSideEvents.SelectedIndexChanged = "OnCostCategoryChanged";
                p.ValueType = typeof(string);
                p.BindList(ViewData["CostTypeName"]);
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "SubCostCategoryID";
            c.Name = "SubCostCategoryID";
            c.Caption = "Sub Cost Item Impacted";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
            c.Width = 120;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "SubCostName";
                p.ValueField = "id";
                p.ValueType = typeof(string);
                p.ClientInstanceName = "SubCostCategoryID";
                p.BindList(ViewData["SubCostName"]);
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "ActionTypeID";
            c.Name = "ActionTypeID";
            c.Caption = "Action Type";
            c.Width = 250;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "ActionTypeName";
                p.ValueField = "id";
                p.ValueType = typeof(string);
                p.ClientInstanceName = "ActionTypeID";
                p.BindList(ViewData["ActionTypeName"]);
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "SynergyImpactID";
            c.Caption = "Synergy Impact";
            c.Width = 200;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "SynImpactName";
                p.ValueField = "id";
                p.ValueType = typeof(string);
                p.BindList(ViewData["SynImpactName"]);
            });
        });
        //settings.Columns.Add(c =>
        //{
        //    c.FieldName = "ProjectYear";
        //    c.Caption = "Project Year";
        //    c.Width = 200;
        //    c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
        //});
        //settings.Columns.Add("StartMonth").Width = 200;
        settings.Columns.Add(c =>
        {
            c.FieldName = "StartMonth";
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.PropertiesEdit.DisplayFormatString = "MMMM, yyyy";
            c.Width = 200;
        });
        //settings.Columns.Add("EndMonth").Width = 200;
        settings.Columns.Add(c =>
        {
            c.FieldName = "EndMonth";
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.PropertiesEdit.DisplayFormatString = "MMMM, yyyy";
            c.Width = 200;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "LaraCode";
            c.Caption = "Lara Charge Code";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
            c.PropertiesEdit.DisplayFormatString = "";
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.Width = 120;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "TargetTY";
            c.Caption = "Target 12 Months (USD)";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
            c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
            c.Width = 140;
            c.CellStyle.BackColor = System.Drawing.Color.AliceBlue;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "TargetNYUB";
            c.Caption = "Target FY Months (USD)";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
            c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
            c.Width = 140;
            c.CellStyle.BackColor = System.Drawing.Color.AliceBlue;
            c.UnboundType = DevExpress.Data.UnboundColumnType.Decimal;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "HOValidity";
            c.Caption = "HO Validity";
            c.Width = 100;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.EditorProperties().ComboBox(p =>
            {
                p.ValueType = typeof(string);
                p.Items.Add("Y");
                p.Items.Add("N");
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "RPOCControl";
            c.Caption = "RPOC Control";
            c.Width = 100;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.EditorProperties().ComboBox(p =>
            {
                p.ValueType = typeof(string);
                p.Items.Add("Y");
                p.Items.Add("N");
                p.Items.Add("KO", "KO");
                p.Items.Add("Under Review", "UR");
                p.Items.Add("OK Level 1 (Cost controller)", "L1");
                p.Items.Add("OK Level 2 (Management RO)", "L2");
                p.Items.Add("OK Level 3 (Coordinateur HO)", "L3");
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "InitStatus";
            c.Caption = "Initiative Status";
            c.Width = 150;
            c.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "Status";
                p.ValueField = "id";
                p.ValueType = typeof(string);
                p.BindList(ViewData["Status"]);
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "YTDTargetUb";
            c.Caption = "YTD Target";
            c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
            c.UnboundType = DevExpress.Data.UnboundColumnType.Decimal;
            c.Width = 100;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "YTDAchievedUb";
            c.Caption = "YTD Achieved";
            c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
            c.UnboundType = DevExpress.Data.UnboundColumnType.Decimal;
            c.Width = 150;
        });
        
        settings.Columns.AddBand(JanuaryBand =>
        {
            
            JanuaryBand.Caption = "January " + tahun + "";
            JanuaryBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            JanuaryBand.Columns.Add(c =>
            {
               // newgrid=c.
                c.FieldName = "TargetJan";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            JanuaryBand.Columns.Add(c =>
            {
                c.FieldName = "AchJan";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(FebruaryBand =>
        {
            FebruaryBand.Caption = "February " + tahun + "";
            FebruaryBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            FebruaryBand.Columns.Add(c =>
            {
                c.FieldName = "TargetFeb";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            FebruaryBand.Columns.Add(c =>
            {
                c.FieldName = "AchFeb";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(MarchBand =>
        {
            MarchBand.Caption = "March " + tahun + "";
            MarchBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            MarchBand.Columns.Add(c =>
            {
                c.FieldName = "TargetMar";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
                
            });
            MarchBand.Columns.Add(c =>
            {
                c.FieldName = "AchMar";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(AprilBand =>
        {
            AprilBand.Caption = "April " + tahun + "";
            AprilBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            AprilBand.Columns.Add(c =>
            {
                c.FieldName = "TargetApr";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            AprilBand.Columns.Add(c =>
            {
                c.FieldName = "AchApr";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(MayBand =>
        {
            MayBand.Caption = "May " + tahun + "";
            MayBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            MayBand.Columns.Add(c =>
            {
                c.FieldName = "TargetMay";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            MayBand.Columns.Add(c =>
            {
                c.FieldName = "AchMay";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(JunBand =>
        {
            JunBand.Caption = "June " + tahun + "";
            JunBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            JunBand.Columns.Add(c =>
            {
                c.FieldName = "TargetJun";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            JunBand.Columns.Add(c =>
            {
                c.FieldName = "AchJun";
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(JulBand =>
        {
            JulBand.Caption = "July " + tahun + "";
            JulBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            JulBand.Columns.Add(c =>
            {
                c.FieldName = "TargetJul";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            JulBand.Columns.Add(c =>
            {
                c.FieldName = "AchJul";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(AugBand =>
        {
            AugBand.Caption = "August " + tahun + "";
            AugBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            AugBand.Columns.Add(c =>
            {
                c.FieldName = "TargetAug";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            AugBand.Columns.Add(c =>
            {
                c.FieldName = "AchAug";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(SepBand =>
        {
            SepBand.Caption = "September " + tahun + "";
            SepBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            SepBand.Columns.Add(c =>
            {
                c.FieldName = "TargetSep";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            SepBand.Columns.Add(c =>
            {
                c.FieldName = "AchSep";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(OctBand =>
        {
            OctBand.Caption = "October " + tahun + "";
            OctBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            OctBand.Columns.Add(c =>
            {
                c.FieldName = "TargetOct";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            OctBand.Columns.Add(c =>
            {
                c.FieldName = "AchOct";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(NovBand =>
        {
            NovBand.Caption = "November " + tahun + "";
            NovBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            NovBand.Columns.Add(c =>
            {
                c.FieldName = "TargetNov";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            NovBand.Columns.Add(c =>
            {
                c.FieldName = "AchNov";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(DecBand =>
        {
            DecBand.Caption = "December " + tahun + "";
            DecBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            DecBand.Columns.Add(c =>
            {
                c.FieldName = "TargetDec";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            DecBand.Columns.Add(c =>
            {
                c.FieldName = "AchDec";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });

        settings.Columns.AddBand(JanuaryNexBand =>
        {
            JanuaryNexBand.Caption = "January " + (tahun + 1) + "";
            JanuaryNexBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            JanuaryNexBand.Columns.Add(c =>
            {
                c.FieldName = "TargetNexJan";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            JanuaryNexBand.Columns.Add(c =>
            {
                c.FieldName = "AchNexJan";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(FebruaryNexBand =>
        {
            FebruaryNexBand.Caption = "February " + (tahun + 1) + "";
            FebruaryNexBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            FebruaryNexBand.Columns.Add(c =>
            {
                c.FieldName = "TargetNexFeb";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            FebruaryNexBand.Columns.Add(c =>
            {
                c.FieldName = "AchNexFeb";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(MarchNexBand =>
        {
            MarchNexBand.Caption = "March " + (tahun + 1) + "";
            MarchNexBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            MarchNexBand.Columns.Add(c =>
            {
                c.FieldName = "TargetNexMar";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            MarchNexBand.Columns.Add(c =>
            {
                c.FieldName = "AchNexMar";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(AprilNexBand =>
        {
            AprilNexBand.Caption = "April " + (tahun + 1) + "";
            AprilNexBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            AprilNexBand.Columns.Add(c =>
            {
                c.FieldName = "TargetNexApr";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            AprilNexBand.Columns.Add(c =>
            {
                c.FieldName = "AchNexApr";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(MayNexBand =>
        {
            MayNexBand.Caption = "May " + (tahun + 1) + "";
            MayNexBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            MayNexBand.Columns.Add(c =>
            {
                c.FieldName = "TargetNexMay";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            MayNexBand.Columns.Add(c =>
            {
                c.FieldName = "AchNexMay";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(JunNexBand =>
        {
            JunNexBand.Caption = "June " + (tahun + 1) + "";
            JunNexBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            JunNexBand.Columns.Add(c =>
            {
                c.FieldName = "TargetNexJun";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            JunNexBand.Columns.Add(c =>
            {
                c.FieldName = "AchNexJun";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(JulNexBand =>
        {
            JulNexBand.Caption = "July " + (tahun + 1) + "";
            JulNexBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            JulNexBand.Columns.Add(c =>
            {
                c.FieldName = "TargetNexJul";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            JulNexBand.Columns.Add(c =>
            {
                c.FieldName = "AchNexJul";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(AugNexBand =>
        {
            AugNexBand.Caption = "August " + (tahun + 1) + "";
            AugNexBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            AugNexBand.Columns.Add(c =>
            {
                c.FieldName = "TargetNexAug";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            AugNexBand.Columns.Add(c =>
            {
                c.FieldName = "AchNexAug";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(SepNexBand =>
        {
            SepNexBand.Caption = "September " + (tahun + 1) + "";
            SepNexBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            SepNexBand.Columns.Add(c =>
            {
                c.FieldName = "TargetNexSep";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            SepNexBand.Columns.Add(c =>
            {
                c.FieldName = "AchNexSep";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(OctNexBand =>
        {
            OctNexBand.Caption = "October " + (tahun + 1) + "";
            OctNexBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            OctNexBand.Columns.Add(c =>
            {
                c.FieldName = "TargetNexOct";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            OctNexBand.Columns.Add(c =>
            {
                c.FieldName = "AchNexOct";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(NovNexBand =>
        {
            NovNexBand.Caption = "November " + (tahun + 1) + "";
            NovNexBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            NovNexBand.Columns.Add(c =>
            {
                c.FieldName = "TargetNexNov";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            NovNexBand.Columns.Add(c =>
            {
                c.FieldName = "AchNexNov";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });
        settings.Columns.AddBand(DecNexBand =>
        {
            DecNexBand.Caption = "December " + (tahun + 1) + "";
            DecNexBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            DecNexBand.Columns.Add(c =>
            {
                c.FieldName = "TargetNexDec";
                c.Caption = "Target";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
            DecNexBand.Columns.Add(c =>
            {
                c.FieldName = "AchNexDec";
                c.Caption = "Achieved";
                c.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                c.PropertiesEdit.DisplayFormatString = "{0:#,###.00}";
                c.Width = 100;
            });
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "AgencyComment";
            c.Caption = "Agency Comment";
            c.Width = 250;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "RPOCComment";
            c.Caption = "RPOC Comment";
            c.Width = 250;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "HOComment";
            c.Caption = "HO Comment";
            c.Width = 250;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "AdditionalInfo";
            c.Caption = "Additional Information";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
            c.Width = 250;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "PortID";
            c.Caption = "Port Name";
            c.Width = 200;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "portName";
                p.ValueField = "id";
                p.ValueType = typeof(string);
                p.BindList(ViewData["portName"]);
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "VendorName";
            c.Caption = "Vendor / Supplier";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
            c.Width = 120;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "UploadedFile";
            c.Caption = "Uploaded File(s)";
            c.Width = 390;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "CreatedDate";
            c.Caption = "Created Date";
            c.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy hh:mm";
            c.Width = 130;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "CreatedBy";
            c.Caption = "Created By";
            c.Width = 200;
        });

        //settings.Columns.Add(c =>
        //{
        //    c.FieldName = "ModifiedDate";
        //    c.Caption = "Modified Date";
        //    c.PropertiesEdit.DisplayFormatString = "MMMM dd, yyyy";
        //    c.Width = 390;
        //});

        settings.Columns.Add(c =>
        {
            c.FieldName = "ModifiedBy";
            c.Caption = "Last Modified By";
            c.Width = 390;
        });
        #endregion

        #region Context Menu here
        settings.SettingsContextMenu.Enabled = true;
        settings.SettingsContextMenu.EnableRowMenu = DefaultBoolean.True;
        settings.FillContextMenuItems = (sender, e) =>
        {
            e.Items.Clear();

            //GridViewContextMenuItem item1 = e.CreateItem("Detail Info", "Info");
            //item1.Image.IconID = DevExpress.Web.ASPxThemes.IconID.SupportInfo16x16;

            GridViewContextMenuItem item2 = e.CreateItem("Edit Detail", "EditDetail");
            item2.Image.IconID = DevExpress.Web.ASPxThemes.IconID.ActionsEdit16x16devav;

            //e.Items.Add(item1);
            e.Items.Add(item2);
        };
        #endregion

        settings.ClientSideEvents.ContextMenuItemClick = "onContextMenuItemFormGridViewClick";
        settings.ClientSideEvents.Init = "OnInit";
        settings.CellEditorInitialize = (s, e) =>
        {
            if (e.Editor is ASPxComboBox)
            {
                ASPxComboBox combo = ((ASPxComboBox)e.Editor);
                var gridNew = e.Column.Grid; Int64 SCID = 0;
                GAIN.Models.GainEntities db = new GAIN.Models.GainEntities();
                GAIN.Models.msubcountry modelsubcountries = new GAIN.Models.msubcountry();
                GAIN.Models.msourcecategory modelsourcecategory = new GAIN.Models.msourcecategory();
                List<GAIN.Models.mbrand> modelbrands = new List<GAIN.Models.mbrand>();
                GAIN.Models.mcountry modelcountry = new GAIN.Models.mcountry();
                GAIN.Models.mregion modelregion = new GAIN.Models.mregion();
                GAIN.Models.msubregion modelsubregion = new GAIN.Models.msubregion();
                GAIN.Models.mcluster modelcluster = new GAIN.Models.mcluster();
                GAIN.Models.mregional_office modelregionaloffice = new GAIN.Models.mregional_office();

                switch (e.Column.FieldName)
                {
                    case "SourceCategory":
                        gridNew = e.Column.Grid;
                        SCID = (long)gridNew.GetRowValuesByKeyValue(e.KeyValue, "SourceCategory");

                        modelsubcountries = db.msubcountries.Where(sc => sc.id == SCID).FirstOrDefault();

                        combo.Items.Clear();
                        combo.Items.Add(modelsourcecategory.categoryname, modelsourcecategory.id);
                        combo.TextField = "categoryname";
                        combo.ValueField = "id";
                        combo.ClientInstanceName = "SourceCategory";
                        //combo.ClientSideEvents.SelectedIndexChanged = "OnSubCountryChanged";
                        break;
                    case "SubCountryID":
                        gridNew = e.Column.Grid;
                        SCID = (long)gridNew.GetRowValuesByKeyValue(e.KeyValue, "SubCountryID");

                        modelsubcountries = db.msubcountries.Where(sc => sc.id == SCID).FirstOrDefault();

                        combo.Items.Clear();
                        combo.Items.Add(modelsubcountries.SubCountryName, modelsubcountries.id);
                        combo.TextField = "SubCountryName";
                        combo.ValueField = "id";
                        combo.ClientInstanceName = "SubCountryID";
                        combo.ClientSideEvents.SelectedIndexChanged = "OnSubCountryChanged";
                        break;
                    case "BrandID":
                        gridNew = e.Column.Grid;
                        SCID = (long)gridNew.GetRowValuesByKeyValue(e.KeyValue, "CountryID");

                        modelbrands = db.mbrands.SqlQuery("SELECT b.id,b.brandname FROM mbrandcountry a LEFT JOIN mbrand b ON a.brandid = b.id WHERE countryid = " + SCID).ToList();

                        combo.Items.Clear();
                        foreach (var v in modelbrands)
                        {
                            combo.Items.Add(v.brandname, v.id);
                        }
                        combo.TextField = "brandname";
                        combo.ValueField = "id";
                        combo.ClientInstanceName = "BrandID";
                        combo.ClientSideEvents.SelectedIndexChanged = "OnBrandChanged";
                        break;
                    case "CountryID":
                        gridNew = e.Column.Grid;
                        SCID = (long)gridNew.GetRowValuesByKeyValue(e.KeyValue, "CountryID");

                        modelcountry = db.mcountries.Where(ct => ct.id == SCID).FirstOrDefault();
                        combo.Items.Clear();
                        combo.Items.Add(modelcountry.CountryName, modelcountry.id);
                        combo.TextField = "CountryName";
                        combo.ValueField = "id";
                        combo.ClientInstanceName = "CountryID";
                        break;
                    case "RegionID":
                        gridNew = e.Column.Grid;
                        SCID = (long)gridNew.GetRowValuesByKeyValue(e.KeyValue, "CountryID");

                        modelregion = db.mregions.SqlQuery("SELECT b.id,b.regionname,b.isActive FROM mcountry a LEFT JOIN mregion b ON a.RegionID = b.id WHERE a.id = " + SCID).FirstOrDefault();
                        combo.Items.Clear();
                        combo.Items.Add(modelregion.RegionName, modelregion.id);
                        combo.TextField = "RegionName";
                        combo.ValueField = "id";
                        combo.ClientInstanceName = "RegionID";
                        break;
                    case "SubRegionID":
                        gridNew = e.Column.Grid;
                        SCID = (long)gridNew.GetRowValuesByKeyValue(e.KeyValue, "RegionID");

                        modelsubregion = db.msubregions.Where(sbr => sbr.RegionID == SCID).FirstOrDefault();
                        combo.Items.Clear();
                        combo.Items.Add(modelsubregion.SubRegionName, modelsubregion.id);
                        combo.TextField = "SubRegionName";
                        combo.ValueField = "id";
                        combo.ClientInstanceName = "SubRegionID";
                        break;
                    case "ClusterID":
                        gridNew = e.Column.Grid;
                        SCID = (long)gridNew.GetRowValuesByKeyValue(e.KeyValue, "ClusterID");

                        modelcluster = db.mclusters.Where(sbr => sbr.id == SCID).FirstOrDefault();
                        combo.Items.Clear();
                        combo.Items.Add(modelcluster.ClusterName, modelcluster.id);
                        combo.TextField = "ClusterName";
                        combo.ValueField = "id";
                        combo.ClientInstanceName = "ClusterID";
                        break;
                    case "RegionalOfficeID":
                        gridNew = e.Column.Grid;
                        SCID = (long)gridNew.GetRowValuesByKeyValue(e.KeyValue, "RegionalOfficeID");

                        modelregionaloffice = db.mregional_office.Where(sbr => sbr.id == SCID).FirstOrDefault();
                        combo.Items.Clear();
                        combo.Items.Add(modelregionaloffice.RegionalOffice_Name, modelregionaloffice.id);
                        combo.TextField = "RegionalOffice_Name";
                        combo.ValueField = "id";
                        combo.ClientInstanceName = "RegionalOfficeID";
                        break;
                    case "CostControlID":
                        gridNew = e.Column.Grid;
                        SCID = (long)gridNew.GetRowValuesByKeyValue(e.KeyValue, "CostControlID");

                        GAIN.Models.mcostcontrolsite modelcostcontrol = new GAIN.Models.mcostcontrolsite();
                        modelcostcontrol = db.mcostcontrolsites.Where(sbr => sbr.id == SCID).FirstOrDefault();
                        combo.Items.Clear();
                        combo.Items.Add(modelcostcontrol.CostControlSiteName, modelcostcontrol.id);
                        combo.TextField = "CostControlSiteName";
                        combo.ValueField = "id";
                        combo.ClientInstanceName = "CostControlID";
                        break;
                    case "LegalEntityID":
                        gridNew = e.Column.Grid;
                        SCID = (long)gridNew.GetRowValuesByKeyValue(e.KeyValue, "LegalEntityID");

                        GAIN.Models.mlegalentity modellegalentity = new GAIN.Models.mlegalentity();
                        modellegalentity = db.mlegalentities.Where(sbr => sbr.id == SCID).FirstOrDefault();
                        combo.Items.Clear();
                        combo.Items.Add(modellegalentity.LegalEntityName, modellegalentity.id);
                        combo.TextField = "LegalEntityName";
                        combo.ValueField = "id";
                        combo.ClientInstanceName = "LegalEntityID";
                        break;
                    case "CostCategoryID":
                        gridNew = e.Column.Grid;
                        SCID = (long)gridNew.GetRowValuesByKeyValue(e.KeyValue, "InitiativeType");

                        List<GAIN.Models.mcosttype> modelitemcategory = new List<GAIN.Models.mcosttype>();
                        modelitemcategory = db.mcosttypes.SqlQuery("SELECT b.id, b.CostTypeName FROM t_subcostinitiative a LEFT JOIN mcosttype b ON a.costitemid = b.id WHERE a.savingtypeid = " + SCID + " GROUP BY b.id, b.CostTypeName").ToList();
                        combo.Items.Clear();
                        foreach (var v in modelitemcategory)
                        {
                            combo.Items.Add(v.CostTypeName, v.id);
                        }
                        combo.TextField = "CostTypeName";
                        combo.ValueField = "id";
                        combo.ClientInstanceName = "CostCategoryID";
                        break;
                    case "SubCostCategoryID":
                        Int64 SCID2 = 0; Int64 SCID3 = 0;
                        gridNew = e.Column.Grid;
                        SCID = (long)gridNew.GetRowValuesByKeyValue(e.KeyValue, "InitiativeType");
                        SCID2 = (long)gridNew.GetRowValuesByKeyValue(e.KeyValue, "CostCategoryID");
                        SCID3 = (long)gridNew.GetRowValuesByKeyValue(e.KeyValue, "BrandID");

                        List<GAIN.Models.msubcost> modelsubcategory = new List<GAIN.Models.msubcost>();
                        modelsubcategory = db.msubcosts.SqlQuery("SELECT b.id,b.SubCostName FROM t_subcostbrand a LEFT JOIN msubcost b ON a.subcostid = b.id WHERE a.savingtypeid = " + SCID + " AND a.costtypeid = " + SCID2 + " AND a.brandid = " + SCID3 + " GROUP BY b.SubCostName").ToList();
                        combo.Items.Clear();
                        foreach (var v in modelsubcategory)
                        {
                            combo.Items.Add(v.SubCostName, v.id);
                        }
                        combo.TextField = "SubCostName";
                        combo.ValueField = "id";
                        combo.ClientInstanceName = "SubCostCategoryID";
                        break;
                    case "ActionTypeID":
                        gridNew = e.Column.Grid;
                        SCID2 = (long)gridNew.GetRowValuesByKeyValue(e.KeyValue, "CostCategoryID");

                        List<GAIN.Models.mactiontype> moodelactiontype = new List<GAIN.Models.mactiontype>();
                        moodelactiontype = db.mactiontypes.SqlQuery("SELECT a.actiontypeid AS id,c.ActionTypeName FROM t_cost_actiontype a LEFT JOIN mcosttype b ON a.costitemid = b.id LEFT JOIN mactiontype c ON a.actiontypeid = c.id WHERE a.costitemid = " + SCID2 + "; ").ToList();
                        combo.Items.Clear();
                        foreach (var v in moodelactiontype)
                        {
                            combo.Items.Add(v.ActionTypeName, v.id);
                        }
                        combo.TextField = "ActionTypeName";
                        combo.ValueField = "id";
                        combo.ClientInstanceName = "ActionTypeID";
                        break;
                }
            }
        };

        int currentMonth = DateTime.Today.Month;
        List<string> months = new List<string> { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
        string targetkeyword="Target";
        string achievedkeyword = "Ach";
        settings.CustomUnboundColumnData = (s, e) =>
        {
            if (tahun == DateTime.Today.Year)
            {


            }
            else if(tahun != DateTime.Today.Year)
            {
                currentMonth = 13;
            }
            decimal? ytdValue = null;
            if (e.Column.FieldName == "YTDTargetUb")
            {

                int c = 1;
                foreach (string m in months)
                {
                    if (c < currentMonth)
                    {
                        if (e.GetListSourceFieldValue(targetkeyword + m) != null)
                        {
                            if (ytdValue.HasValue)
                            {
                                ytdValue += (decimal)e.GetListSourceFieldValue(targetkeyword + m);
                            }
                            else
                            {
                                ytdValue = (decimal)e.GetListSourceFieldValue(targetkeyword + m);
                            }
                        }
                        else
                        {
                            if (ytdValue == 0 || ytdValue == null)
                                ytdValue = 0;
                        }
                    }
                    c++;
                }
                e.Value = ytdValue;
            }
            else if (e.Column.FieldName == "YTDAchievedUb")
            {
                ytdValue = null;
                int c = 1;
                foreach (string m in months)
                {
                    if (c < currentMonth)
                    {
                        if (e.GetListSourceFieldValue(achievedkeyword + m) != null)
                        {
                            if (ytdValue.HasValue)
                            {
                                ytdValue += (decimal)e.GetListSourceFieldValue(achievedkeyword + m);
                            }
                            else
                            {
                                ytdValue = (decimal)e.GetListSourceFieldValue(achievedkeyword + m);
                            }
                        }
                        else
                        {
                            if (ytdValue == 0 || ytdValue == null)
                                ytdValue = 0;
                        }
                    }
                    c++;
                }
                e.Value = ytdValue;
            }

            else if (e.Column.FieldName == "TargetNYUB")
            {
                ytdValue = 0;
                foreach (string m in months)
                {
                    if (e.GetListSourceFieldValue(targetkeyword + m) != null)
                    {
                        ytdValue += (decimal)e.GetListSourceFieldValue(targetkeyword + m);
                    }
                    else
                    {
                        if (ytdValue == 0 || ytdValue == null)
                            ytdValue = 0;
                    }
                }
                e.Value = ytdValue;
            }
        };

        settings.ClientSideEvents.EndCallback = "OnEndCallback";

        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
        settings.Settings.VerticalScrollableHeight = 50;

        settings.Settings.ShowFooter = true;
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetTY").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetNYUB").DisplayFormat = "{0:N2}";

        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "YTDTargetUb").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "YTDAchievedUb").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetJan").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchJan").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetNexJan").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchNexJan").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetFeb").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchFeb").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetNexFeb").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchNexFeb").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetMar").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchMar").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetNexMar").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchNexMar").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetApr").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchApr").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetNexApr").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchNexApr").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetMay").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchMay").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetNexMay").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchNexMay").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetJun").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchJun").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetNexJun").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchNexJun").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetJul").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchJul").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetNexJul").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchNexJul").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetAug").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchAug").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetNexAug").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchNexAug").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetSep").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchSep").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetNexSep").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchNexSep").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetOct").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchOct").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetNexOct").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchNexOct").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetNov").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchNov").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetNexNov").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchNexNov").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetDec").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchDec").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TargetNexDec").DisplayFormat = "{0:N2}";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AchNexDec").DisplayFormat = "{0:N2}";


        settings.CustomJSProperties = (s, e) =>
        {
            decimal TotalTarget = 0;
            decimal TotalSavingAchieved = 0;

            MVCxGridView gridView = (MVCxGridView) s;
            if (gridView.GetTotalSummaryValue(gridView.TotalSummary["YTDTargetUb"]) != null)
                TotalTarget = (decimal)gridView.GetTotalSummaryValue(gridView.TotalSummary["YTDTargetUb"]);

            if (gridView.GetTotalSummaryValue(gridView.TotalSummary["YTDAchievedUb"]) != null)
                TotalSavingAchieved = (decimal)gridView.GetTotalSummaryValue(gridView.TotalSummary["YTDAchievedUb"]);

            gridView.JSProperties["cpTotalTarget"] = String.Format("$ {0:N2}", TotalTarget);
            gridView.JSProperties["cpTotalSavingAchieved"] = String.Format("$ {0:N2}", TotalSavingAchieved);
            gridView.JSProperties["cpNumberOfInitiative"] = String.Format("{0:N0}", gridView.VisibleRowCount);
        };

        settings.ClientSideEvents.RowDblClick = "onRowDoubleClick";


    });
    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()
